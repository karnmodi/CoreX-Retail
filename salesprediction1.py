# -*- coding: utf-8 -*-
"""SalesPrediction1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qzT6fTYjXPIg5vuKFMiDB6CjI-lPKpTc
"""

from google.colab import files
uploaded = files.upload()

"""# Preprocess and Aggregate the Data"""

# Basic Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ML Libraries
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import xgboost as xgb

# Load the Excel file
df = pd.read_excel('Minute-Level_Sales_Data.xlsx')

# Display basic info
print(df.info())
df.head()

# Check for missing values
print(df.isnull().sum())

# Convert datetime to separate useful columns
df['date'] = df['datetime'].dt.date
df['hour'] = df['datetime'].dt.hour
df['day_of_week'] = df['datetime'].dt.dayofweek
df['month'] = df['datetime'].dt.month
df['year'] = df['datetime'].dt.year

df.head()

# Daily sales: group by date
daily_sales = df.groupby('date')['unit_price'].sum().reset_index()
daily_sales.rename(columns={'unit_price': 'daily_sales'}, inplace=True)

daily_sales.head()

plt.figure(figsize=(16,6))
plt.plot(daily_sales['date'], daily_sales['daily_sales'])
plt.title('Daily Sales Trend')
plt.xlabel('Date')
plt.ylabel('Sales (£)')
plt.grid(True)
plt.show()

"""# Feature Engineering for Prediction"""

# Already done (but let's double-check)
df['date'] = df['datetime'].dt.date
df['hour'] = df['datetime'].dt.hour
df['day_of_week'] = df['datetime'].dt.dayofweek  # Monday=0, Sunday=6
df['month'] = df['datetime'].dt.month
df['year'] = df['datetime'].dt.year
df['is_weekend'] = df['day_of_week'].apply(lambda x: 1 if x>=5 else 0)

df.head(5)

# Sort the data first
df = df.sort_values(by='datetime')

# Group sales cumulatively for each day
df['cumulative_sales_today'] = df.groupby('date')['unit_price'].cumsum()

df[['datetime', 'date', 'unit_price', 'cumulative_sales_today']].head(10)

# Aggregate to hourly level
hourly_sales = df.groupby(['date', 'hour']).agg({
    'unit_price': 'sum',
    'cumulative_sales_today': 'max'
}).reset_index()

hourly_sales.rename(columns={'unit_price': 'hourly_sales'}, inplace=True)

hourly_sales.head()

# Get total daily sales
daily_total_sales = df.groupby('date')['unit_price'].sum().reset_index()
daily_total_sales.rename(columns={'unit_price': 'total_sales_today'}, inplace=True)

# Merge into hourly_sales
hourly_sales = pd.merge(hourly_sales, daily_total_sales, on='date', how='left')

hourly_sales.head()

"""# Model Training (Daily Sales Prediction)

"""

X = hourly_sales[['hour', 'cumulative_sales_today']]

# Add more features from the original dataset
hourly_sales['day_of_week'] = pd.to_datetime(hourly_sales['date']).dt.dayofweek
hourly_sales['is_weekend'] = hourly_sales['day_of_week'].apply(lambda x: 1 if x >= 5 else 0)
hourly_sales['month'] = pd.to_datetime(hourly_sales['date']).dt.month

# Update X with new features
X = hourly_sales[['hour', 'cumulative_sales_today', 'day_of_week', 'is_weekend', 'month']]
y = hourly_sales['total_sales_today']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = xgb.XGBRegressor(
    objective='reg:squarederror',
    n_estimators=300,
    learning_rate=0.05,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

# Predict
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluate
from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"RMSE: {rmse}")
print(f"R2 Score: {r2}")

forecast_df = pd.DataFrame({
    'Actual Sales': y_test,
    'Predicted Sales': y_pred
}).reset_index(drop=True)

# Calculate error and accuracy
forecast_df['Error'] = forecast_df['Actual Sales'] - forecast_df['Predicted Sales']
forecast_df['Absolute Error'] = forecast_df['Error'].abs()
forecast_df['Accuracy %'] = 100 - (forecast_df['Absolute Error'] / forecast_df['Actual Sales']) * 100

forecast_df.head(10)

# Plot Visualzation
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red')  # ideal line
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales')
plt.grid(True)
plt.show()

# Line Comparison
comparison_df = pd.DataFrame({'Actual Sales': y_test, 'Predicted Sales': y_pred})
comparison_df = comparison_df.reset_index(drop=True)

plt.figure(figsize=(14,7))
plt.plot(comparison_df['Actual Sales'], label='Actual Sales', marker='o')
plt.plot(comparison_df['Predicted Sales'], label='Predicted Sales', marker='x')
plt.title('Actual vs Predicted Sales Over Test Samples')
plt.xlabel('Sample Index')
plt.ylabel('Sales Amount (£)')
plt.legend()
plt.grid(True)
plt.show()